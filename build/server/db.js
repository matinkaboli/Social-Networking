const mongoose=require("mongoose"),autoInc=require("mongoose-auto-increment"),ttl=require("mongoose-ttl"),connection=mongoose.connect("mongodb://localhost/test",{useMongoClient:!0});mongoose.Promise=Promise;let Schema=mongoose.Schema;autoInc.initialize(connection),mongoose.connection.on("error",console.error.bind(console,"Connection failed."));const commentSchema=new Schema({user:Number,time:Number,text:String},{_id:!1,versionKey:!1}),postSchema=new Schema({_id:String,title:String,time:Number,likes:[Number],comments:[commentSchema],user:Number},{_id:!1,versionKey:!1}),banSchema=new Schema({user:Number}),userSchema=new Schema({_id:Number,name:String,username:{type:String,required:!0,unique:!0,trim:!0},password:{type:String,required:!0},email:{type:String,required:!0,trim:!0,unique:!0},emailurl:{type:String},created:Number,showEmail:{type:Boolean},description:{about:{type:String,trim:!0},address:{type:String,trim:!0},link:{type:String,trim:!0},sex:{type:Boolean},avatar:{type:String},case:{type:Boolean}},likes:Number,follower:[Number],following:[Number],admin:{type:Boolean},forgot:String,times:Number},{versionKey:!1});userSchema.plugin(autoInc.plugin,"User"),banSchema.plugin(ttl,{ttl:18e5});const User=mongoose.model("User",userSchema),Post=mongoose.model("Post",postSchema),Ban=mongoose.model("Ban",banSchema),checkUserAndEmail=(e,r)=>new Promise((n,i)=>{User.find({$or:[{username:e},{email:r}]},(e,r)=>{"[]"==JSON.stringify(r)?n("Username is free."):i("Username or email exists.")})}),ckeckUserAndPassword=(e,r)=>new Promise((n,i)=>{User.find({$and:[{username:e},{password:r}]},(e,r)=>{"[]"==JSON.stringify(r)?i("Damn it..."):n(r)})}),checkToken=e=>new Promise((r,n)=>{User.find({emailurl:e},(i,o)=>{"[]"==JSON.stringify(o)?n("404 not found."):User.update({emailurl:e},{emailurl:"ok"},(e,n)=>{if(e)throw e;r("ok")})})}),checkUsername=e=>new Promise((r,n)=>{User.find({username:e},(i,o)=>{if(i)throw i;"[]"==JSON.stringify(o)?n(e):r(o)})}),checkEmail=e=>new Promise((r,n)=>{User.find({email:e},(i,o)=>{if(i)throw i;"[]"==JSON.stringify(o)?n(e):r(o)})}),checkBy=(e,r)=>new Promise((e,n)=>{User.find({key:r},(r,i)=>{if(r)throw r;"[]"==JSON.stringify(i)?n("Not Found."):e(i)})});module.exports={User:User,Post:Post,Ban:Ban,checkUserAndEmail:(e,r)=>new Promise((n,i)=>{User.find({$or:[{username:e},{email:r}]},(e,r)=>{"[]"==JSON.stringify(r)?n("Username is free."):i("Username or email exists.")})}),ckeckUserAndPassword:(e,r)=>new Promise((n,i)=>{User.find({$and:[{username:e},{password:r}]},(e,r)=>{"[]"==JSON.stringify(r)?i("Damn it..."):n(r)})}),checkToken:e=>new Promise((r,n)=>{User.find({emailurl:e},(i,o)=>{"[]"==JSON.stringify(o)?n("404 not found."):User.update({emailurl:e},{emailurl:"ok"},(e,n)=>{if(e)throw e;r("ok")})})}),checkUsername:e=>new Promise((r,n)=>{User.find({username:e},(i,o)=>{if(i)throw i;"[]"==JSON.stringify(o)?n(e):r(o)})}),checkBy:(e,r)=>new Promise((e,n)=>{User.find({key:r},(r,i)=>{if(r)throw r;"[]"==JSON.stringify(i)?n("Not Found."):e(i)})}),checkEmail:e=>new Promise((r,n)=>{User.find({email:e},(i,o)=>{if(i)throw i;"[]"==JSON.stringify(o)?n(e):r(o)})})};